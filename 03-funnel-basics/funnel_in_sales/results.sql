set search_path to m03_funnel_sales,public;
-- Q1
\copy (WITH all_events AS (SELECT 'web' AS src, event_id, customer_id, session_id, event_time, event_type FROM web_events UNION ALL SELECT 'app' AS src, event_id, customer_id, session_id, event_time, event_type FROM app_events) SELECT * FROM all_events ORDER BY event_time) TO 'results/q1_all_events.csv' WITH (FORMAT csv, HEADER true);

-- Q3
\copy (WITH all_events AS (SELECT 'web' AS src, event_id, customer_id, session_id, event_time, event_type FROM web_events UNION ALL SELECT 'app' AS src, event_id, customer_id, session_id, event_time, event_type FROM app_events), steps AS (SELECT c.customer_id, c.first_name, EXISTS (SELECT 1 FROM all_events e WHERE e.customer_id=c.customer_id AND e.event_type='landing') AS landed, EXISTS (SELECT 1 FROM all_events e WHERE e.customer_id=c.customer_id AND e.event_type='signup') AS signed_up, EXISTS (SELECT 1 FROM all_events e WHERE e.customer_id=c.customer_id AND e.event_type='view_product') AS viewed, EXISTS (SELECT 1 FROM all_events e WHERE e.customer_id=c.customer_id AND e.event_type='add_to_cart') AS added, (EXISTS (SELECT 1 FROM all_events e WHERE e.customer_id=c.customer_id AND e.event_type='purchase') OR EXISTS (SELECT 1 FROM orders o WHERE o.customer_id=c.customer_id)) AS purchased FROM customers c) SELECT * FROM steps ORDER BY customer_id) TO 'results/q3_funnel_flags.csv' WITH (FORMAT csv, HEADER true);

-- Q4
\copy (WITH all_events AS (SELECT 'web' AS src, event_id, customer_id, session_id, event_time, event_type FROM web_events UNION ALL SELECT 'app' AS src, event_id, customer_id, session_id, event_time, event_type FROM app_events), steps AS (SELECT c.customer_id, EXISTS (SELECT 1 FROM all_events e WHERE e.customer_id=c.customer_id AND e.event_type='landing') AS landed, EXISTS (SELECT 1 FROM all_events e WHERE e.customer_id=c.customer_id AND e.event_type='signup') AS signed_up, EXISTS (SELECT 1 FROM all_events e WHERE e.customer_id=c.customer_id AND e.event_type='view_product') AS viewed, EXISTS (SELECT 1 FROM all_events e WHERE e.customer_id=c.customer_id AND e.event_type='add_to_cart') AS added, (EXISTS (SELECT 1 FROM all_events e WHERE e.customer_id=c.customer_id AND e.event_type='purchase') OR EXISTS (SELECT 1 FROM orders o WHERE o.customer_id=c.customer_id)) AS purchased FROM customers c) SELECT SUM(CASE WHEN landed THEN 1 ELSE 0 END) AS landed, SUM(CASE WHEN signed_up THEN 1 ELSE 0 END) AS signed_up, SUM(CASE WHEN viewed THEN 1 ELSE 0 END) AS viewed, SUM(CASE WHEN added THEN 1 ELSE 0 END) AS added, SUM(CASE WHEN purchased THEN 1 ELSE 0 END) AS purchased, ROUND(100.0 * SUM(CASE WHEN purchased THEN 1 ELSE 0 END)::numeric / NULLIF(SUM(CASE WHEN landed THEN 1 ELSE 0 END),0), 1) AS purchase_rate_pct FROM steps) TO 'results/q4_funnel_totals.csv' WITH (FORMAT csv, HEADER true);

-- Q5
\copy (WITH all_events AS (SELECT 'web' AS src, event_id, customer_id, session_id, event_time, event_type FROM web_events UNION ALL SELECT 'app' AS src, event_id, customer_id, session_id, event_time, event_type FROM app_events) SELECT c.customer_id, c.first_name FROM customers c WHERE EXISTS (SELECT 1 FROM all_events e WHERE e.customer_id=c.customer_id AND e.event_type='add_to_cart') AND NOT EXISTS (SELECT 1 FROM all_events e WHERE e.customer_id=c.customer_id AND e.event_type='purchase') AND NOT EXISTS (SELECT 1 FROM orders o WHERE o.customer_id=c.customer_id) ORDER BY c.customer_id) TO 'results/q5_cart_no_purchase.csv' WITH (FORMAT csv, HEADER true);

-- Q6
\copy (WITH all_events AS (SELECT 'web' AS src, event_id, customer_id, session_id, event_time, event_type FROM web_events UNION ALL SELECT 'app' AS src, event_id, customer_id, session_id, event_time, event_type FROM app_events), first_touch AS (SELECT customer_id, MIN(event_time) AS first_time FROM all_events GROUP BY customer_id), first_source AS (SELECT ft.customer_id, e.src AS source FROM first_touch ft JOIN all_events e ON e.customer_id=ft.customer_id AND e.event_time=ft.first_time), revenue AS (SELECT customer_id, SUM(amount) AS revenue FROM orders GROUP BY customer_id) SELECT fs.source, COALESCE(SUM(r.revenue),0) AS total_revenue FROM first_source fs LEFT JOIN revenue r ON r.customer_id = fs.customer_id GROUP BY fs.source ORDER BY total_revenue DESC) TO 'results/q6_revenue_by_source_first_touch.csv' WITH (FORMAT csv, HEADER true);
